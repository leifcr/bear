# This is an example deployment file for capistrano and Bear
#
# You need to setup runit, mysql, nginx and rvm on the server before deploying
# 
# On ubuntu:
# apt-get install mysql-server runit nginx
# 
# For rvm, goto rvm.io and read the install docs. you probably know how to do this already
# 
# RVM should be setup SYSTEM wide
# 
# 
# Notes on apps you want to run through the CI:
# 
# You need to setup your mysql server with proper accounts.
# 
# I suggest setting up a user account bear_test with bear_test
# as password and lock your mysql instance to localhost only
# The account should have full access to all bear_test_% databases, as well as create rights
# 
# You can then setup your applications to use bear_test_my_app_test as DB and 
# username bear_test password bear_test
#

default_run_options[:pty] = true

load "deploy/assets"

require "bundler/capistrano"
require "rvm/capistrano"

set :rvm_type, :system

set :rvm_ruby_string, '1.9.3-p448@bear'
before 'deploy:setup', 'rvm:install_ruby' # install Ruby and create gemset (You probably want to to this...)

# Use gemset instead of bundle directory
set :bundle_dir, ''
set :bundle_flags, '--system --quiet'

set :application, 'bear'
set :deploy_via, :remote_cache
set :repository,  "git://github.com/leifcr/bear.git"
set :scm, :git
set :database, 'mysql'
set :keep_releases, 3 # only need 3 releases to be kept for production

role :web, "ci.example.com"                            # Your HTTP server, Apache/etc
role :app, "ci.example.com"                            # This may be the same as your `Web` server
role :db,  "ci.example.com", :primary => true          # This is where Rails migrations will run

after "deploy:update", "deploy:cleanup" 

set :rails_env, "production"
set :deploy_env, "#{rails_env}"
set :deploy_to, "/web/#{rails_env}/#{application}"

#set :branch, 'master' # In case you want a different branch

set :server_names, 'ci.example.com'

# keep cache in shared path...
namespace :deploy do
  desc "Link cache folder to the new release"
  task :link_cache_folder, :roles => :app, :on_error => :continue do
    run "mkdir -p #{shared_path}/cache"
    run "ln -s #{shared_path}/cache #{latest_release}/public/cache"  
  end
end

namespace :bear do
  desc "Symlink database.yml"
  task :link_database_yml, :roles => :app, :on_error => :continue do
    run "ln -s #{shared_path}/config/database.yml #{latest_release}/config/database.yml"      
  end
  desc "Link bear configs"
  task :link_config, :roles => :app, :on_error => :continue do
    run "ln -s #{shared_path}/config/bear.yml #{latest_release}/config/bear.yml"      
    run "ln -s #{shared_path}/config/email.yml #{latest_release}/config/email.yml"      
  end
  desc "Link bear build folder"
  task :link_builds_folder, :roles => :app, :on_error => :continue do
    run "rm -rf #{latest_release}/builds"
    run "mkdir -p #{shared_path}/builds"
    run "ln -s #{shared_path}/builds #{latest_release}/builds"
  end
  desc "Link bear public build folder"
  task :link_public_builds_folder, :roles => :app, :on_error => :continue do
    run "mkdir -p #{shared_path}/public/builds"
    run "ln -s #{shared_path}/public/builds #{latest_release}/public/builds"
  end
  namespace :setup do
    desc "Upload bear email config"
    task :email_config, :roles => :app, :on_error => :continue do
      upload("config/email.yml", "#{shared_path}/config/email.yml")
    end
    desc "Upload bear config"
    task :config, :roles => :app, :on_error => :continue do
      upload("config/bear.yml", "#{shared_path}/config/bear.yml")
    end
  end
end

before "bundle:install", "bear:link_database_yml"
after "deploy:update_code", "deploy:link_cache_folder"
after "deploy:update_code", "bear:link_config"
after "deploy:update_code", "bear:link_builds_folder"
after "deploy:update_code", "bear:link_public_builds_folder"

require 'capistrano/puma'
require 'capistrano/delayed_job'


